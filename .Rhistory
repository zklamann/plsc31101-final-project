ani.options(convert = shQuote('c:/program files/imagemagick/magick.exe'))
convert ~ version
library("animation")
install.packages("animation")
library("animation")
library(animation)
tmap_animation(map1919_animation, file = "map1919_animation.gif", delay = 150, restart.delay = 3000, loop = T)
tmap_animation(map1919_animation, file = "map1919_animation.gif", delay = 150, restart.delay = 3000, loop = T)
ani.options(convert = 'c:/programfiles/imagemagick/convert.exe')
tmap_animation(map1919_animation, file = "map1919_animation.gif", delay = 150, restart.delay = 3000, loop = T)
ani.options(convert = 'C:\Program Files\ImageMagick-7.0.9-Q16\convert.exe')
ani.options(convert = 'C:\ProgramFiles\ImageMagick-7.0.9-Q16\convert.exe')
ani.options(convert = "C:/ProgramFiles/ImageMagick-7.0.9-Q16.convert.exe")
tmap_animation(map1919_animation, file = "map1919_animation.gif", delay = 150, restart.delay = 3000, loop = T)
library(magick)
tmap_animation(map1919_animation, file = "map1919_animation.gif", delay = 150, restart.delay = 3000, loop = T)
ani.options(convert = "C:/ProgramFiles/ImageMagick-7.0.9-Q16.convert.exe")
ani.options(convert = "C:/Program Files/ImageMagick-7.0.9-Q16/convert.exe")
tmap_animation(map1919_animation, file = "map1919_animation.gif", delay = 150, restart.delay = 3000, loop = T)
tmap_animation(map1919_animation, file = "map1919_animation.gif", delay = 150, restart.delay = 3000, loop = T, width = 2000)
tmap_animation(map1919_animation, file = "map1919_animation.gif", delay = 150, restart.delay = 3000, loop = T, width = 2000)
ani.options(convert = "C:/Program Files/ImageMagick-7.0.9-Q16/convert.exe")
map1919_animation <- tm_shape(map1919_no_borders) +
tm_fill() +
tm_shape(violent_events) +
tm_dots(col = "red", alpha = .3, size = "ve_part") +
tm_facets(along = "ve_date", free.coords = FALSE)
tmap_animation(map1919_animation, file = "map1919_animation.gif", delay = 150, restart.delay = 3000, loop = T, width = 2000)
system('"C:\\Program Files (x86)\\LyX 2.0\\imagemagick\\convert.exe" -delay 20 -loop 0 files_*.png animation.gif')
shell("convert -set delay 80 -loop 0 *.jpg example_shell_test.gif")
ani.options(convert = 'C:/Program Files/ImageMagick-6.8.9-Q16/convert.exe')
ani.options("convert")
library(animation)
path.to.convert <- paste0(shortPathName(
"C:\\Program Files\\ImageMagick-6.9.0-Q16\\"), "convert.exe")
ani.options(convert=path.to.convert)
tmap_animation(map1919_animation, file = "map1919_animation.gif", delay = 150, restart.delay = 3000, loop = T, width = 2000)
ani.options(convert = "C:/PROGRA~1/ImageMagick-7.0.3-Q16/magick.exe")
tmap_animation(map1919_animation, file = "map1919_animation.gif", delay = 150, restart.delay = 3000, loop = T, width = 2000)
rm(path.to.convert)
magickPath <- shortPathName("C:\\Program Files\\ImageMagick-7.0.3-Q16\\magick.exe")
ani.options(convert=magickPath)
tmap_animation(map1919_animation, file = "map1919_animation.gif", delay = 150, restart.delay = 3000, loop = T, width = 2000)
tmap_animation(map1919_animation, file = "map1919_animation.gif", delay = 150, restart.delay = 3000, loop = T, width = 2000, ani.options(convert = 'path/to/convert.exe'))
path_to_convert = "\"C:\\Program Files\\ImageMagick-7.0.6-Q16\\magick.exe\""
animation::ani.options(interval = 0.12, ani.width = 480, ani.height = 320, convert=path_to_convert)
animation::saveGIF(donorm(20), movie.name = paste0("Normals",1,"_Ani.gif"))
tmap_animation(map1919_animation, file = "map1919_animation.gif", delay = 150, restart.delay = 3000, loop = T, width = 2000)
rm(magickPath)
rm(path_to_convert)
magick_options()
Sys.setenv(PATH = paste("C:/Program Files/ImageMagick/bin",
Sys.getenv("PATH"), sep = ";"))
tmap_animation(map1919_animation, file = "map1919_animation.gif", delay = 150, restart.delay = 3000, loop = T, width = 2000)
library(installr); install.ImageMagick(URL = "http://www.imagemagick.org/script/binary-releases.php")
library(installr)
install.packages("installr")
library(installr)
install.ImageMagick(URL = "http://www.imagemagick.org/script/binary-releases.php")
tmap_animation(map1919_animation, file = "map1919_animation.gif", delay = 150, restart.delay = 3000, loop = T, width = 2000)
install.packages("magick")
install.packages("magick")
tmap_animation(map1919_animation, file = "map1919_animation.gif", delay = 150, restart.delay = 3000, loop = T, width = 2000)
library(sf)
library(tidyr)
library(dplyr)
library(foreign)
library(tidyverse)
library(sp)
library(raster)
library(rgdal)
library(stringr)
library(maptools)
#Now, we need to map a time-series map, weighed by number of participants, so let's load up a bunch more packages.
library(ggplot2)
library(maps)
library(ggthemes)
library(rmapshaper)
library(magick)
library(tmap)
library(animation)
tmap_animation(map1919_animation, file = "map1919_animation.gif", delay = 150, restart.delay = 3000, loop = T, width = 2000)
plot(map1919_animation)
#Now we try to get the animation working
tm_shape(map1919_no_borders) +
tm_fill() +
tm_shape(violent_events) +
tm_dots(col = "red", alpha = .3, size = "ve_part") +
tm_facets(along = "ve_date", free.coords = FALSE)
#Now we try to get the animation working
tm_shape(map1919_no_borders) +
tm_fill() +
tm_shape(violent_events) +
tm_dots(col = "red", alpha = .3, size = "ve_part") +
tm_facets(by = "ve_date", free.coords = FALSE)
#okay, so some the ImageMagick driver simply isn't working and refuses to be fixed. Let's try this in GGAnimate
#first requires everything to be in sf, so let's do that
map1919_sf <- st_as_sf(map1919)
violent_events_sf <- st_as_sf(violent_event)
violent_events_sf <- st_as_sf(violent_events)
#okay, so some the ImageMagick driver simply isn't working and refuses to be fixed. Let's try this in GGAnimate
#first requires everything to be in sf, so let's do that
map1919_sf <- st_as_sf(map1919_no_borders)
germany_sf <- ggplot() +
borders("map1919_sf", color = "gray85", fill = "gray80") +
theme_map()
germany_sf <- ggplot() +
borders("map1919_sf", color = "gray85", fill = "gray80")
germany_sf <- ggplot(map1919_sf)
ggplot(map1919_sf)
spatial_data_berlin <- spatial_data %>%
filter(str_detect(spatial_data$KREISE, "Ba")) %>%
filter(spatial_data_berlin$KRNR < 100)
#Second task: Need to create a map of just Berlin, so we need to subset based on Berlin Kreise (districts)
spatial_data_berlin <- spatial_data %>%
filter(str_detect(spatial_data$KREISE, "Ba")) %>%
filter(spatial_data_berlin$KRNR < 100)
#Let's check out the structure and plot this to get a look at what this produced:
str(spatial_data_berlin)
#Second task: Need to create a map of just Berlin, so we need to subset based on Berlin Kreise (districts)
spatial_data_berlin <- spatial_data %>%
filter(str_detect(spatial_data$KREISE, "Ba")) %>%
filter(spatial_data_berlin$KRNR < 100)
spatial_data_berlin <- spatial_data %>%
filter(str_detect(spatial_data$KREISE, "Ba")) %>%
filter(spatial_data_berlin$KRNR < 100)
#Second task: Need to create a map of just Berlin, so we need to subset based on Berlin Kreise (districts)
spatial_data_berlin <- spatial_data %>%
filter(str_detect(spatial_data$KREISE, "Ba")) %>%
filter(spatial_data_berlin$KRNR < 100)
spatial_data_berlin <- spatial_data %>%
filter(str_detect(spatial_data$KREISE, "Ba")) %>%
filter(spatial_data$KRNR < 100)
#Second task: Need to create a map of just Berlin, so we need to subset based on Berlin Kreise (districts)
spatial_data_berlin <- spatial_data %>%
filter(str_detect(spatial_data$KREISE, "Ba")) %>%
filter(spatial_data$KRNR < 100)
#Second task: Need to create a map of just Berlin, so we need to subset based on Berlin Kreise (districts)
spatial_data_berlin <- spatial_data %>%
filter(str_detect(spatial_data$KREISE, "Ba"))
spatial_data_berlin <- spatial_data_berlin %>%
filter(spatial_data_berlin$KREISE < 100)
spatial_data_berlin <- spatial_data_berlin %>%
filter(spatial_data_berlin$KRNR < 100)
View(spatial_data_berlin)
#Second task: Need to create a map of just Berlin, so we need to subset based on Berlin Kreise (districts)
spatial_data_berlin <- spatial_data %>%
filter(str_detect(spatial_data$KREISE, "Ba"))
View(violent_events_sf)
View(spatial_data_berlin)
spatial_data_berlin <- spatial_data_berlin %>%
filter(spatial_data_berlin$KRNR < 100)
View(spatial_data_berlin)
#Let's check out the structure and plot this to get a look at what this produced:
str(spatial_data_berlin)
tm_shape(spatial_data_berlin) +
tm_polygons("KREISE", legend.show = F) +
tm_text("KREISE", size = .5)
#This doesn't look super great as far as a map of the districts in Berlin, but it's generally okay
#Let's clear it up a bit.
spatial_data_berlin_no_borders <- ms_dissolve(spatial_data_berlin)
plot(spatial_data_berlin_no_borders)
rm(map1919_sf)
rm(violent_events_sf)
#We now need a SPDF for the location of violent events during the January Uprising
proj4string(spatial_data_berlin_no_borders)
#We now need a SPDF for the location of violent events during the January Uprising
st_crs(spatial_data_berlin_no_borders)
#We now need a SPDF for the location of violent events during the January Uprising
st_crs(spatial_data_berlin_no_borders) <- 4236
st_crs(spatial_data_berlin_no_borders)
violent_events_berlin <- read.csv("Data/spatial_data/violent_events_spart.csv")
violent_events_berlin <- st_as_sf(violent_events_berlin)
coordinate(violent_events_berlin) <- c("POINT_Y", "POINT_X")
coordinates(violent_events_berlin) <- c("POINT_Y", "POINT_X")
#We now need a SPDF for the location of violent events during the January Uprising
st_crs(spatial_data_berlin_no_borders) <- 4326
#This doesn't look super great as far as a map of the districts in Berlin, but it's generally okay
#Let's clear it up a bit.
spatial_data_berlin_no_borders <- ms_dissolve(spatial_data_berlin)
#We now need a SPDF for the location of violent events during the January Uprising
st_crs(spatial_data_berlin_no_borders) <- 4326
st_crs(spatial_data_berlin_no_borders)
violent_events_berlin <- read.csv("Data/spatial_data/violent_events_spart.csv")
coordinates(violent_events_berlin) <- c("POINT_Y", "POINT_X")
projection(violent_events_berlin) <- "+init=epsg:4326"
violent_events_berlin <- st_as_sf(violent_events_berlin)
st_crs(violent_events_berlin)
st_crs(spatial_data_berlin_no_borders)
plot(spatial_data_berlin_no_borders)
plot(violent_events_berlin, add = T, col = "red")
plot(violent_events_berlin, add = T, color = "red")
plot(violent_events_berlin, add = T)
plot(violent_events_berlin)
#okay, so these are in the same format, let's try to graph them! Probably won't work, but alright
ggplot(spatial_data_berlin_no_borders) +
geom_sf()
install.packages("gganimate")
library(gganimate)
ggplot(spatial_data_berlin_no_borders) +
geom_sf() +
labs(title = "Spartacist Uprising")
theme_map <- function(...) {
theme_minimal() +
theme(
axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
plot.background = element_rect(fill = "#f5f5f2", color = NA),
panel.background = element_rect(fill = "#f5f5f2", color = NA),
legend.background = element_rect(fill = "#f5f5f2", color = NA),
panel.border = element_blank(),
legend.position = "bottom",
...
)
}
ggplot(spatial_data_berlin_no_borders) +
geom_sf() +
theme_map() +
labs(title = "Spartacist Uprising")
ggplot(spatial_data_berlin_no_borders) +
geom_sf() +
ggplot(violent_events_berlin) +
geom_sf()+
theme_map() +
labs(title = "Spartacist Uprising")
ggplot(spatial_data_berlin_no_borders) +
geom_sf() +
geom_sf(violent_events_berlin) +
theme_map() +
labs(title = "Spartacist Uprising")
ggplot(spatial_data_berlin_no_borders) +
geom_sf() +
geom_sf(violent_events_berlin) +
theme_map() +
labs(title = "Spartacist Uprising")
violent_events_berlin_2 <- read.csv("Data/spatial_data/violent_events_spart.csv")
ggplot(spatial_data_berlin_no_borders) +
geom_sf() +
geom_point(violent_events_berlin_2, aes(x= violent_events_berlin_2$POINT_Y, y = violent_events_berlin_2$POINT_X)) +
labs(title = "Spartacist Uprising")
ggplot(spatial_data_berlin_no_borders) +
geom_sf()
ggplot(spatial_data_berlin_no_borders) +
geom_sf() +
ggplot(spatial_data_berlin_no_borders) +
geom_sf() +
labs(title = "Spartacist Uprising")
ggplot(spatial_data_berlin_no_borders) +
geom_sf() +
geom_point(violent_events_berlin_2, aes(x= violent_events_berlin_2$POINT_Y, y = violent_events_berlin_2$POINT_X)) +
labs(title = "Spartacist Uprising")
ggplot(spatial_data_berlin_no_borders) +
geom_sf() +
labs(title = "Spartacist Uprising")
rm(violent_events_berlin_2)
rm(theme_map)
violent_events_berlin <- read.csv("Data/spatial_data/violent_events_spart.csv")
coordinates(violent_events_berlin) <- c("POINT_Y", "POINT_X")
tm_shape(spatial_data_berlin) +
tm_polygons("KREISE", legend.show = F) +
tm_text("KREISE", size = .5)
#Let's check out the structure and plot this to get a look at what this produced:
str(spatial_data_berlin)
spatial_data_berlin <-as_Spatial(spatial_data_berlin)
spatial_data_berlin_no_borders <- ms_dissolve(spatial_data_berlin)
tm_shape(spatial_data_berlin) +
tm_polygons("KREISE", legend.show = F) +
tm_text("KREISE", size = .5)
#Let's check out the structure and plot this to get a look at what this produced:
tm_shape(spatial_data_berlin) +
tm_borders()
#Let's check out the structure and plot this to get a look at what this produced:
tm_shape(spatial_data_berlin_no_borders) +
tm_borders()
spatial_data_berlin <-as_Spatial(spatial_data_berlin)
#Let's check out the structure and plot this to get a look at what this produced:
tm_shape(spatial_data_berlin_no_borders) +
tm_borders()
#Second task: Need to create a map of just Berlin, so we need to subset based on Berlin Kreise (districts)
spatial_data_berlin <- spatial_data %>%
filter(str_detect(spatial_data$KREISE, "Ba"))
spatial_data_berlin <- spatial_data_berlin %>%
filter(spatial_data_berlin$KRNR < 100)
spatial_data_berlin <-as_Spatial(spatial_data_berlin)
#Let's check out the structure and plot this to get a look at what this produced:
tm_shape(spatial_data_berlin_no_borders) +
tm_borders()
#Let's check out the structure and plot this to get a look at what this produced:
tm_shape(spatial_data_berlin_no_borders) +
tm_borders()
#Second task: Need to create a map of just Berlin, so we need to subset based on Berlin Kreise (districts)
spatial_data_berlin <- spatial_data %>%
filter(str_detect(spatial_data$KREISE, "Ba"))
spatial_data_berlin <- spatial_data_berlin %>%
filter(spatial_data_berlin$KRNR < 100)
spatial_data_berlin <-as_Spatial(spatial_data_berlin)
#Let's check out the structure and plot this to get a look at what this produced:
tm_shape(spatial_data_berlin) +
tm_borders()
#Let's check out the structure and plot this to get a look at what this produced:
tm_shape(spatial_data_berlin) +
tm_borders(fill = "KREISE") +
tm_text("name")
#Let's check out the structure and plot this to get a look at what this produced:
tm_shape(spatial_data_berlin) +
tm_borders(fill = "KREISE") +
tm_text("NAME")
#Let's check out the structure and plot this to get a look at what this produced:
tm_shape(spatial_data_berlin) +
tm_polygons(group = "KREISE") +
tm_text("NAME")
#Let's check out the structure and plot this to get a look at what this produced:
tm_shape(spatial_data_berlin) +
tm_polygons()
#This doesn't look super great as far as a map of the districts in Berlin, but it's generally okay
#Let's clear it up a bit.
spatial_data_berlin_no_borders <- ms_dissolve(spatial_data_berlin)
proj4string(spatial_data_berlin_no_borders)
proj4string(spatial_data_berlin_no_borders)
#We now need a SPDF for the location of violent events during the January Uprising
violent_events_berlin <- read.csv("Data/spatial_data/violent_events_spart.csv")
coordinates(violent_events_berlin) <- c("POINT_Y", "POINT_X")
projection(violent_events_berlin) <- "+init=epsg:4326"
proj4string(violent_events_berlin)
projection(spatial_data_berlin_no_borders) <- "+init=epsg:4326"
bbox(spatial_data_berlin_no_borders)
bbox(violent_events_berlin)
violent_events_berlin <- spTransform(violent_events_berlin, CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
spatial_data_berlin_no_borders <- spTransform(spatial_data_berlin_no_borders, CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
bbox(violent_events_berlin)
bbox(spatial_data_berlin_no_borders)
#Let's check out the structure and plot this to get a look at what this produced:
str(spatial_data_berlin)
bbox(spatial_data_berlin)
#We now need a SPDF for the location of violent events during the January Uprising
violent_events_berlin <- read.csv("Data/spatial_data/violent_events_spart.csv")
coordinates(violent_events_berlin) <- c("POINT_Y", "POINT_X")
projection(violent_events_berlin) <- "+init=epsg:4326"
bbox(violent_events_berlin)
bbox(spatial_data_berlin_no_borders)
violent_events_berlin <- spTransform(violent_events_berlin, CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
bbox(violent_events_berlin)
#Great, now let's get them equalitzed out
projection(spatial_data_berlin) <- "+init=epsg:4326"
spatial_data_berlin_no_borders <- spTransform(spatial_data_berlin, CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
bbox(violent_events_berlin)
bbox(spatial_data_berlin_no_borders)
rm(spatial_data_berlin_no_borders)
#Second task: Need to create a map of just Berlin, so we need to subset based on Berlin Kreise (districts)
spatial_data_berlin <- spatial_data %>%
filter(str_detect(spatial_data$KREISE, "Ba"))
spatial_data_berlin <- spatial_data_berlin %>%
filter(spatial_data_berlin$KRNR < 100)
spatial_data_berlin <-as_Spatial(spatial_data_berlin)
#We now need a SPDF for the location of violent events during the January Uprising
violent_events_berlin <- read.csv("Data/spatial_data/violent_events_spart.csv")
coordinates(violent_events_berlin) <- c("POINT_Y", "POINT_X")
projection(violent_events_berlin) <- "+init=epsg:4326"
#Great, now let's get them equalitzed out
violent_events_berlin <- spTransform(violent_events_berlin, CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
bbox(violent_events_berlin)
bbox(violent_events)
spatial_data_berlin <- spTransform(spatial_data_berlin, CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
projection(spatial_data_berlin) <- "+init=epsg:4326"
spatial_data_berlin <- spTransform(spatial_data_berlin, CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
bbox(violent_events_berlin)
bbox(spatial_data_berlin)
#Second task: Need to create a map of just Berlin, so we need to subset based on Berlin Kreise (districts)
spatial_data_berlin <- spatial_data %>%
filter(str_detect(spatial_data$KREISE, "Ba"))
spatial_data_berlin <- spatial_data_berlin %>%
filter(spatial_data_berlin$KRNR < 100)
is.projected(spatial_data_berlin)
spatial_data_berlin <-as_Spatial(spatial_data_berlin)
is.projected(spatial_data_berlin)
proj4string(spatial_data_berlin) <- CRS("+init=epsg:4326")
spatial_data_berlin <- spTransform(spatial_data_berlin, CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
bbox(violent_events_berlin)
bbox(spatial_data_berlin)
#Second task: Need to create a map of just Berlin, so we need to subset based on Berlin Kreise (districts)
spatial_data_berlin <- spatial_data %>%
filter(str_detect(spatial_data$KREISE, "Ba"))
spatial_data_berlin <- spatial_data_berlin %>%
filter(spatial_data_berlin$KRNR < 100)
spatial_data_berlin <-as_Spatial(spatial_data_berlin)
#Second task: Need to create a map of just Berlin, so we need to subset based on Berlin Kreise (districts)
spatial_data_berlin <- spatial_data %>%
filter(str_detect(spatial_data$KREISE, "Ba"))
spatial_data_berlin <- spatial_data_berlin %>%
filter(spatial_data_berlin$KRNR < 100)
str(spatial_data_berlin, max.level = 2)
spatial_data_berlin <-as_Spatial(spatial_data_berlin)
str(spatial_data_berlin, max.level = 2)
bbox(spatial_data_berlin)
#We now need a SPDF for the location of violent events during the January Uprising
violent_events_berlin <- read.csv("Data/spatial_data/violent_events_spart.csv")
coordinates(violent_events_berlin) <- c("POINT_Y", "POINT_X")
projection(violent_events_berlin) <- "+init=epsg:4326"
View(map_data)
View(spatial_data)
spatial_data <- st_read("data/spatial_data/nazi1930.shp")
#first issue here is this data is old, so it's not an S4 and has to be converted which requires a new package, but some pretty easy code, so all good
map_data <- as_Spatial(spatial_data, cast = T)
View(map_data)
#Second task: Need to create a map of just Berlin, so we need to subset based on Berlin Kreise (districts)
map_data_berlin <- map_data %>%
filter(str_detect(map_data@data$KREISE, "Ba"))
#Second task: Need to create a map of just Berlin, so we need to subset based on Berlin Kreise (districts)
map_data_berlin <- map_data@data %>%
filter(str_detect(map_data@data$KREISE, "Ba"))
View(map_data_berlin)
map_data_berlin <- map_data_berlin %>%
filter(map_data_berlin$KRNR < 100)
#Let's check out the structure and plot this to get a look at what this produced:
str(map_data_berlin, max.level = 2)
tm_shape(map_data_berlin) +
tm_polygons()
tm_shape(map_data_berlin) +
tm_polygons()
View(map_data_berlin)
coordinates(map_data_berlin) <- c("X_COORd", "Y_COORD")
coordinates(map_data_berlin) <- c("X_COORD", "Y_COORD")
projection(map_data_berlin) <- "+init=epsg:4326"
#Let's check out the structure and plot this to get a look at what this produced:
str(map_data_berlin, max.level = 2)
tm_shape(map_data_berlin) +
tm_polygons()
#This isn't the most high quality rendering of Berlin. Let's try one of the other potential maps.
map1920_Berlin <- readOGR(dsn = "Data/spatial_data/mosaic_data_1945set/German_Empire_1920_v.1.0.shp")
View(map1920_Berlin)
map1920_Berlin <- map1920_Berlin %>%
filter(KREISE == "BERLIN")
map1920_Berlin <- map1920_Berlin %>%
filter(map1920_Berlin$NAME == "BERLIN")
plot(map1920_Berlin)
#Subsetting
map1920_Berlin <- map1920_Berlin[map1920_Berlin$NAME == "BERLIN", ]
plot(map1920_Berlin)
tm_shape(spatial_data_berlin) +
tm_polygons()
plot(map1920_Berlin)
bbox(map1920_berlin)
bbox(map1920_Berlin)
#We now need a SPDF for the location of violent events during the January Uprising
violent_events_berlin <- read.csv("Data/spatial_data/violent_events_spart.csv")
coordinates(violent_events_berlin) <- c("POINT_Y", "POINT_X")
projection(violent_events_berlin) <- "+init=epsg:4326"
proj4string(map1920_Berlin)
#We need to get these in the same CRS
violent_events_berlin <- spTransform(violent_events_berlin, CRS(proj4string(map1920_Berlin)))
bbox(violent_events_berlin)
bbox(map1920_Berlin)
#We should now be able to plot them simultaneously
plot(map1920_Berlin)
plot(violent_events_berlin, add = T, col = "red", lwd = 10)
#Time to write these as .shp files
writeOGR(obj = violent_events, dsn = "Data/spatial_data/violent_events.shp")
?writeOGR
#Time to write these as .shp files
writeOGR(obj = violent_events, dsn = "Data/spatial_data/violent_events.shp", driver = "ESRI Shapefile")
#Time to write these as .shp files
writeOGR(obj = violent_events, dsn = "Data/spatial_data/violent_events.shp", layer = "violent_events", driver = "ESRI Shapefile")
writeOGR(obj = map1919_no_borders, dsn = "Data/spatial_data/map1919/map1919_no_borders.shp", layer = "map1919_no_borders", driver = "ESRI Shapefile")
writeOGR(obj = map1919, dsn = "Data/spatial_data/map1919/map1919.shp", layer = "map1919", driver = "ESRI Shapefile")
#Write these files
writeOGR(obj = violent_events_berlin, dsn = "Data/spatial_data/violent_events_Berlin/", layer = "violent_events_berlin", driver = "ESRI Shapefile")
#Write these files
writeOGR(obj = violent_events_berlin, dsn = "Data/spatial_data/violent_events_Berlin/violent_events_berlin.shp", layer = "violent_events_berlin", driver = "ESRI Shapefile")
writeOGR(obj = map1920_Berlin, dsn = "Data/spatial_data/map1920_Berlin/map1920_Berlin.shp", layer = "map1920_Berlin", driver = "ESRI Shapefile")
#For task 1
#Need to read in the files
map1919 <- readOGR(dsn = "Data/spatial_data/map1919/map1919.shp")
plot(map1919)
#Clean up map1919 a bit
map1919_no_borders <- ms_dissolve(map1919)
plot(map1919_no_borders)
violent_events <- readOGR(dsn = "Data/spatial_data/violent_events/violent_events.shp")
plot(violent_events, add = t, col = "red", lwd = 10)
plot(violent_events, add = T, col = "red", lwd = 10)
#Now we try to get the animation working
map1919_animation <- tm_shape(map1919_no_borders) +
tm_fill() +
tm_shape(violent_events) +
tm_dots(col = "red", alpha = .3, size = "ve_part") +
tm_facets(along = "ve_date", free.coords = FALSE)
tmap_animation(map1919_animation, file = "map1919_animation.gif", delay = 150, restart.delay = 3000, loop = T, width = 2000)
#For task 2
#Read in the files
map1920_Berlin <- readOGR(dsn = "Data/spatial_data/map1920_Berlin/map1920_Berlin.shp")
ve_berlin <- readOGR(dsn = "Data/spatial_data/violent_events_Berlin/violent_events_berlin.shp")
#Check everything is okay
plot(map1920_Berlin)
plot(ve_berlin, add = T, lwd = 10)
#Set up this animation
berlin_animation <- tm_shape(map1920_Berlin) +
tm_fill() +
tm_shape(ve_berlin) +
tm_dots(col = "red", alpha = .3, size = "ve_part") +
tm_facets(along = "ve_date", free.coords = FALSE)
getwd()
getwd()
knitr::opts_chunk$set(echo = TRUE)
knitr::include_graphics("visualizations/berlin_map.jpeg")
knitr::include_graphics("visualizations/berlin_map.jpeg")
knitr::include_graphics("../Rochelle-Class-Project/visualizations/berlin_map.jpeg")
knitr::include_graphics("visualizations/berlin_map.jpeg")
